<?php

class AssetsControllerTest extends TestCase {

public function setUp()
{
    parent::setUp();

    //Create an Owned Item
    $this->owned_item = new SteamApi_Item();
    $this->owned_item->uuid = "12345678901234567";
    $this->owned_item->name = "Red Hat";
    $this->owned_item->description = "A silly red hat.";
    $this->owned_item->price = 199;
    $this->owned_item->version = 1.004;
    $this->assertTrue($this->owned_item->save());

    //Create a new Unowned Item
    $this->unowned_item = new SteamApi_Item();
    $this->unowned_item->uuid = "234567890123456789";
    $this->unowned_item->name = "Blue Hat";
    $this->unowned_item->description = "A sad blue hat.";
    $this->unowned_item->price = 199;
    $this->unowned_item->version = 1;
    $this->assertTrue($this->unowned_item->save());

    //XP cost
    $this->cost = 100;
    $this->costTooMuch = 1000;

    //Create a User
    $this->user = new SteamApi_User();
    $this->user->steamid = '1234567890';
    $this->user->xp = '999';
    $this->assertTrue($this->user->save());

    //Give the owned_item to the User
    $this->user->items()->attach($this->owned_item->uuid);
}

public function tearDown()
{
    $users = SteamApi_User::all();
    foreach($users as $user) {$user->delete();}
}

public function testCanGetAssetManifest()
{
    $response = $this->call('GET', 'getAssetManifest');

    $this->assertTrue($this->client->getResponse()->isOk());
    $manifest = $this->client->getResponse()->getContent();
    $manifest = json_decode($manifest);
    $this->assertEquals('OK', $manifest->response);
    $this->assertEquals($this->owned_item->uuid, $manifest->items[0]->uuid);
}

public function testCanGetUnlockedItems()
{
    $response = $this->call('POST', 'getUnlockedItems',array('steamid' => $this->user->steamid));

    $this->assertTrue($this->client->getResponse()->isOk());
    $unlocks_table = $this->client->getResponse()->getContent();
    $unlocks_table = json_decode($unlocks_table);
    $this->assertEquals('OK', $unlocks_table->response);
    $this->assertEquals($this->owned_item->uuid, $unlocks_table->unlocks[0]);
}

public function testXpIsReturnedWithUnlockedItems()
{
    $response = $this->call('POST', 'getUnlockedItems',array('steamid' => $this->user->steamid));

    $this->assertTrue($this->client->getResponse()->isOk());
    $unlocks_table = $this->client->getResponse()->getContent();
    $unlocks_table = json_decode($unlocks_table);
    $this->assertEquals('OK', $unlocks_table->response);
    $this->assertEquals($this->user->xp, $unlocks_table->xp);   

}

public function testCanUploadAssetManifest()
{
/*
Sample JSON string generated by the in-game database
{"Items":
    [
        {"price":"595", "description":"none", "uuid":"1170626816", "name":"Big Red Bat", "version":"1"}, 
        {"price":"2", "description":"none", "uuid":"1136337664", "name":"Magnums", "version":"1"}, 
        {"price":"85", "description":"none", "uuid":"1951233", "name":"Sunny", "version":"1"}
        ]
}
*/
    $manifest = '{"Items":[{"price":"199", "description":"A silly red hat.", "uuid":"12345678901234567", "name":"Red Hat", "version":"1.005"}, {"price":"595", "description":"none", "uuid":"1170626816", "name":"Big Red Bat", "version":"1"}, {"price":"2", "description":"none", "uuid":"1136337664", "name":"Magnums", "version":"1"}, {"price":"85", "description":"none", "uuid":"1951233", "name":"Sunny", "version":"1"}]}';

    //response without verification should fail
    $response = $this->call('POST', 'uploadAssetManifest',array('manifest' => $manifest));
    $this->assertTrue($this->client->getResponse()->isOk());
    $response = json_decode($this->client->getResponse()->getContent());
    $this->assertEquals($response->response, 'Failure');

    //response with verification is successful
    $response = $this->call('POST', 'uploadAssetManifest',array('manifest' => $manifest, 'key' => hash(\Config::get('steam-api::hashingAlgorithm'), \Config::get('steam-api::secretKey'). $manifest)));
    $this->assertTrue($this->client->getResponse()->isOk());
    $response = json_decode($this->client->getResponse()->getContent());
    $this->assertEquals($response->response, 'OK');

    //Grab the items from the database
    $redHat = SteamApi_Item::find($this->owned_item->uuid);
    $bigRedBat = SteamApi_Item::find('1170626816');
    $magnums = SteamApi_Item::find('1136337664');
    $sunny = SteamApi_Item::find('1951233');

    //Check that data was inserted correctly
    $this->assertEquals('1.005', $redHat->version);
    $this->assertEquals('595', $bigRedBat->price);
    $this->assertEquals('Magnums', $magnums->name);
    $this->assertEquals('none', $sunny->description);

    //Get the asset manifest
    $response = $this->call('GET', 'getAssetManifest');
    $this->assertTrue($this->client->getResponse()->isOk());
    $manifest = $this->client->getResponse()->getContent();
    $manifest = json_decode($manifest);
    $this->assertEquals('OK', $manifest->response);

    //Check the asset manifest
    $this->assertEquals($this->owned_item->uuid, $manifest->items[3]->uuid);
    $this->assertEquals('1.005', $manifest->items[3]->version); // The version was updated
    $this->assertEquals('595', $manifest->items[2]->price);
    $this->assertEquals('Magnums', $manifest->items[1]->name);
    $this->assertEquals('none', $manifest->items[0]->description);
}

public function testCanUploadAccountExperience()
{
    $steamid = '1234567890';
    $newExperience = '9000';

    //response without verification should fail
    $response = $this->call('POST', 'uploadAccountXp',array('steamid' => $steamid, 'accountXP' => $newExperience));
    $this->assertTrue($this->client->getResponse()->isOk());
    $response = json_decode($this->client->getResponse()->getContent());
    $this->assertEquals($response->response, 'Failure');

    //XP in the database has not changed because the response was a failure
    $user = SteamApi_User::find($steamid);
    $this->assertEquals($user->xp, $this->user->xp);

    //response with verification is successful
    $response = $this->call('POST', 'uploadAccountXp',array('steamid' => $steamid, 'accountXP' => $newExperience, 'key' => hash(\Config::get('steam-api::hashingAlgorithm'), \Config::get('steam-api::secretKey'). $steamid . $newExperience)));
    $this->assertTrue($this->client->getResponse()->isOk());
    $response = json_decode($this->client->getResponse()->getContent());
    $this->assertEquals($response->response, 'OK');

    //XP in the database has changed
    $user = SteamApi_User::find($steamid);
    $this->assertEquals($user->xp, $newExperience);
}

public function testCanUnlockItem()
{
    //User does not own the item
    $user = SteamApi_User::find($this->user->steamid);
    $items = $user->items;
    $this->assertFalse($items->contains($this->unowned_item->uuid));

    //response without key verification should fail
    $response = $this->call('POST', 'unlockItem',array('steamid' => $this->user->steamid, 'uuid' => $this->unowned_item->uuid));
    $this->assertTrue($this->client->getResponse()->isOk());
    $content = $this->client->getResponse()->getContent();
    $content = json_decode($content);
    $this->assertEquals('Failure', $content->response);

    //Hit the route and make sure it returns success
    $response = $this->call('POST', 'unlockItem',array('steamid' => $this->user->steamid, 'uuid' => $this->unowned_item->uuid, 'key' => hash(\Config::get('steam-api::hashingAlgorithm'), \Config::get('steam-api::secretKey'). $this->user->steamid . $this->unowned_item->uuid)));
    $this->assertTrue($this->client->getResponse()->isOk());
    $content = $this->client->getResponse()->getContent();
    $content = json_decode($content);
    $this->assertEquals('OK', $content->response);

    //Now the user owns the item
    $user = SteamApi_User::find($this->user->steamid);
    $items = $user->items;
    $this->assertTrue($items->contains($this->unowned_item->uuid));
}

public function testCanUnlockItemWithExperience()
{
    //User does not own the item
    $user = SteamApi_User::find($this->user->steamid);
    $items = $user->items;
    $oldXp = $user->xp;
    $this->assertFalse($items->contains($this->unowned_item->uuid));

    //response without key verification should fail
    $response = $this->call('POST', 'unlockItemWithXp',array('steamid' => $this->user->steamid, 'uuid' => $this->unowned_item->uuid, 'xp' => $this->cost));
    $this->assertTrue($this->client->getResponse()->isOk());
    $content = $this->client->getResponse()->getContent();
    $content = json_decode($content);
    $this->assertEquals('Failure', $content->response);

    //Hit the route and make sure it returns success
    $response = $this->call('POST', 'unlockItemWithXp',array('steamid' => $this->user->steamid, 'uuid' => $this->unowned_item->uuid, 'xp' => $this->cost, 'key' => hash(\Config::get('steam-api::hashingAlgorithm'), \Config::get('steam-api::secretKey'). $this->user->steamid . $this->unowned_item->uuid . $this->cost)));
    $this->assertTrue($this->client->getResponse()->isOk());
    $content = $this->client->getResponse()->getContent();
    $content = json_decode($content);
    $this->assertEquals('OK', $content->response);

    //Now the user owns the item
    $user = SteamApi_User::find($this->user->steamid);
    $items = $user->items;
    $this->assertTrue($items->contains($this->unowned_item->uuid));

    //User XP was deducted
    $this->assertEquals($oldXp - $this->cost, $user->xp);
}

public function testNotEnoughXpToUnlockItem()
{
    //User does not own the item
    $user = SteamApi_User::find($this->user->steamid);
    $items = $user->items;
    $oldXp = $user->xp;
    $this->assertFalse($items->contains($this->unowned_item->uuid));

    //response without key verification should fail
    $response = $this->call('POST', 'unlockItemWithXp',array('steamid' => $this->user->steamid, 'uuid' => $this->unowned_item->uuid, 'xp' => $this->costTooMuch));
    $this->assertTrue($this->client->getResponse()->isOk());
    $content = $this->client->getResponse()->getContent();
    $content = json_decode($content);
    $this->assertEquals('Failure', $content->response);

    //Hit the route and make sure it returns failure
    $response = $this->call('POST', 'unlockItemWithXp',array('steamid' => $this->user->steamid, 'uuid' => $this->unowned_item->uuid, 'xp' => $this->costTooMuch, 'key' => hash(\Config::get('steam-api::hashingAlgorithm'), \Config::get('steam-api::secretKey'). $this->user->steamid . $this->unowned_item->uuid . $this->costTooMuch)));
    $this->assertTrue($this->client->getResponse()->isOk());
    $content = $this->client->getResponse()->getContent();
    $content = json_decode($content);
    $this->assertEquals('Failure', $content->response);

    //User does not own the item
    $user = SteamApi_User::find($this->user->steamid);
    $items = $user->items;
    $this->assertFalse($items->contains($this->unowned_item->uuid));

    //User XP has not changed
    $this->assertEquals($oldXp, $user->xp);
}

}